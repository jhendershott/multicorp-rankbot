// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using namespace multicorp_bot.Models;
//
//    var fleetImport = FleetImport.FromJson(jsonString);

namespace multicorp_bot.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class FleetImport
    {
        [J("id")] public string Id { get; set; }
        [J("cost")] public string Cost { get; set; }
        [J("name")] public string Name { get; set; }
        [J("pledge")] public string Pledge { get; set; }
        [J("warbond")] public bool Warbond { get; set; }
        [J("package_id")] public string PackageId { get; set; }
        [J("pledge_date")] public string PledgeDate { get; set; }
        [J("manufacturer")] public string Manufacturer { get; set; }
        [J("insurance_type")] public InsuranceType? InsuranceType { get; set; }
        [J("insurance_duration")] public long? InsuranceDuration { get; set; }
        [J("lti", NullValueHandling = N.Ignore)] public bool? Lti { get; set; }
        [J("monthsInsurance")] public long? MonthsInsurance { get; set; }
    }

    public enum InsuranceType { Lti, Monthly };

    public partial class FleetImport
    {
        public static List<FleetImport> FromJson(string json) => JsonConvert.DeserializeObject<List<FleetImport>>(json, FIConverter.Settings);
    }

    public static class FiSerialize
    {
        public static string ToJson(this List<FleetImport> self) => JsonConvert.SerializeObject(self, FIConverter.Settings);
    }

    internal static class FIConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                InsuranceTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class InsuranceTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InsuranceType) || t == typeof(InsuranceType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "lti":
                    return InsuranceType.Lti;
                case "monthly":
                    return InsuranceType.Monthly;
            }
            throw new Exception("Cannot unmarshal type InsuranceType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InsuranceType)untypedValue;
            switch (value)
            {
                case InsuranceType.Lti:
                    serializer.Serialize(writer, "lti");
                    return;
                case InsuranceType.Monthly:
                    serializer.Serialize(writer, "monthly");
                    return;
            }
            throw new Exception("Cannot marshal type InsuranceType");
        }

        public static readonly InsuranceTypeConverter Singleton = new InsuranceTypeConverter();
    }
}
